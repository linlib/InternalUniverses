/- IMPORTS -/

import Mathlib.CategoryTheory.Bicategory.Basic
import Mathlib.CategoryTheory.Types 
import Mathlib.CategoryTheory.DiscreteCategory
import Mathlib.Combinatorics.Quiver.Basic
import Mathlib.CategoryTheory.Category.Init
--import Mathlib.CategoryTheory.Monad.Algebra
import Aesop
import Init
import Mathlib.CategoryTheory.DiscreteCategory
import Mathlib.CategoryTheory.Bicategory.Strict
import Mathlib.CategoryTheory.ConcreteCategory.Bundled
import Mathlib.CategoryTheory.Functor.Basic
import Init.Core
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Monad.Adjunction
import Mathlib.CategoryTheory.Monad.Algebra
import Mathlib.CategoryTheory.Monad.Monadicity
import Mathlib.CategoryTheory.Monad.Basic
universe u
universe v

import Mathlib.AlgebraicTopology.SimplexCategory
import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.AlgebraicTopology.TopologicalSimplex -- auxiliary definitions for AlgebraicTopology.SimplicialSet
import Mathlib.Topology.Homotopy.HomotopyGroup      -- Cube
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.Functor.Category      -- category of functors
import Mathlib.CategoryTheory.Yoneda
import Mathlib.CategoryTheory.Bicategory.Basic
import Mathlib.CategoryTheory.Bicategory.IsKan
import Mathlib.CategoryTheory.Bicategory.Extension




/- CHAPTER 1 -/



open CategoryTheory


#check CategoryTheory.Bicategory.mk
#check CategoryTheory.Bicategory.Strict
#check CategoryTheory.Bicategory.Strict.mk
#check CategoryTheory.Functor
#check CategoryTheory.Functor.mk
#check CategoryTheory.CategoryStruct


def zero : Nat := 0


def reflexivity {X : Type} {x : X} : x = x := Eq.refl x


def symmetry {X : Type} {x : X} {y : X}  (p : x = y) := Eq.symm p


def transitivity {X : Type} {x : X} {y : X} {z : X} (p : x = y) (q : y = z) := Eq.trans p q


def extensionality (f g : X ‚Üí Y) (p : (x:X) ‚Üí f x = g x) : f = g := funext p


def equal_arguments {X : Type} {Y : Type} {a : X} {b : X} (f : X ‚Üí Y) (p : a = b) : f a = f b := congrArg f p

def equal_functions {X : Type} {Y : Type} {f‚ÇÅ : X ‚Üí Y} {f‚ÇÇ : X ‚Üí Y} (p : f‚ÇÅ = f‚ÇÇ) (x : X) : f‚ÇÅ x = f‚ÇÇ x := congrFun p x

def pairwise {A : Type} {B : Type} (a‚ÇÅ : A) (a‚ÇÇ : A) (b‚ÇÅ : B) (b‚ÇÇ : B) (p : a‚ÇÅ = a‚ÇÇ) (q : b‚ÇÅ = b‚ÇÇ) : (a‚ÇÅ,b‚ÇÅ)=(a‚ÇÇ,b‚ÇÇ) := (congr ((congrArg Prod.mk) p) q)


def ‚ÑÇùïíùï• : (CategoryTheory.Bicategory CategoryTheory.Cat) := CategoryTheory.Cat.bicategory

#check ‚ÑÇùïíùï•

variable {C : Cat}
#check C.Œ±
#check C.str
#check C.str.Hom


#check ‚ÑÇùïíùï•


#check ‚ÑÇùïíùï•
#check ‚ÑÇùïíùï•.Hom
#check ‚ÑÇùïíùï•.id
#check ‚ÑÇùïíùï•.comp
#check ‚ÑÇùïíùï•.whiskerLeft
notation F "‚óÅ" Œ∑ => ‚ÑÇùïíùï•.whiskerLeft F Œ∑
#check ‚ÑÇùïíùï•.whiskerRight
notation Œ∑ "‚ñ∑" F => ‚ÑÇùïíùï•.whiskerRight Œ∑ F
#check ‚ÑÇùïíùï•.associator
#check ‚ÑÇùïíùï•.leftUnitor
#check ‚ÑÇùïíùï•.rightUnitor
#check ‚ÑÇùïíùï•.whiskerLeft_id
#check ‚ÑÇùïíùï•.whiskerLeft_comp
#check ‚ÑÇùïíùï•.id_whiskerLeft 
#check ‚ÑÇùïíùï•.comp_whiskerLeft
#check ‚ÑÇùïíùï•.id_whiskerRight
#check ‚ÑÇùïíùï•.comp_whiskerRight
#check ‚ÑÇùïíùï•.whiskerRight_comp
#check ‚ÑÇùïíùï•.whiskerRight_id 
#check ‚ÑÇùïíùï•.whisker_assoc
#check ‚ÑÇùïíùï•.whisker_exchange
#check ‚ÑÇùïíùï•.pentagon
#check ‚ÑÇùïíùï•.triangle




variable {C : Cat}
variable {D : Cat}
variable {Œ¶  :C ‚âÖ D }
#check Œ¶.hom
#check Œ¶.inv
#check Œ¶.hom_inv_id
#check Œ¶.inv_hom_id


notation A "‚Ä¢" B => B ‚â´ A
notation A "‚≠¢" B => A ‚ü∂ B


-----------------------------------------
-- simplicial sets
-----------------------------------------

#check SSet
-- SSet.{u} : Type (u + 1)

#check SSet.standardSimplex
-- SSet.standardSimplex : CategoryTheory.Functor SimplexCategory SSet

#check SSet.boundary
-- SSet.boundary (n : ‚Ñï) : SSet

#check SSet.boundaryInclusion
-- SSet.boundaryInclusion (n : ‚Ñï) :
--   SSet.boundary n ‚ü∂ SSet.standardSimplex.obj (SimplexCategory.mk n)

#check SSet.horn
-- SSet.horn (n : ‚Ñï) (i : Fin (n + 1)) : SSet

#check SSet.hornInclusion
-- SSet.hornInclusion (n : ‚Ñï) (i : Fin (n + 1)) :
--   SSet.horn n i ‚ü∂ SSet.standardSimplex.obj (SimplexCategory.mk n)

#check Cube.boundary
-- Cube.boundary.{u_1} (N : Type u_1) : Set (N ‚Üí ‚ÜëunitInterval)
--   -- ‚Üë means type coersion, which can often be omitted

-----------------------------------------
-- category theory
-----------------------------------------

#check CategoryTheory.Category
-- CategoryTheory.Category.{v, u} (obj : Type u) : Type (max u (v + 1))

#check CategoryTheory.Functor
-- CategoryTheory.Functor.{v‚ÇÅ, v‚ÇÇ, u‚ÇÅ, u‚ÇÇ}
--   (C : Type u‚ÇÅ) [inst‚úù : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C]
--   (D : Type u‚ÇÇ) [inst‚úù¬π : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D] :
--      Type (max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ)

#check CategoryTheory.Functor.category -- category of functors
-- CategoryTheory.Functor.category.{v‚ÇÅ, v‚ÇÇ, u‚ÇÅ, u‚ÇÇ}
--   {C : Type u‚ÇÅ} [inst‚úù : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C]
--   {D : Type u‚ÇÇ} [inst‚úù¬π : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D] :
--      CategoryTheory.Category.{max u‚ÇÅ v‚ÇÇ, max (max (max u‚ÇÇ u‚ÇÅ) v‚ÇÇ) v‚ÇÅ}
--        (CategoryTheory.Functor C D)

#check CategoryTheory.yoneda
-- CategoryTheory.yoneda.{v‚ÇÅ, u‚ÇÅ}
--   {C : Type u‚ÇÅ} [inst‚úù : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C] :
--     CategoryTheory.Functor C (CategoryTheory.Functor C·µí·µñ (Type v‚ÇÅ))

#check CategoryTheory.coyoneda
-- CategoryTheory.coyoneda.{v‚ÇÅ, u‚ÇÅ}
--   {C : Type u‚ÇÅ} [inst‚úù : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C] :
--     CategoryTheory.Functor C·µí·µñ (CategoryTheory.Functor C (Type v‚ÇÅ))

-----------------------------------------
-- bicategories
-----------------------------------------

#check CategoryTheory.Bicategory
-- CategoryTheory.Bicategory.{w, v, u} (B : Type u) : Type (max (max u (v + 1)) (w + 1))

#check CategoryTheory.Bicategory.LeftExtension.IsKan
-- CategoryTheory.Bicategory.LeftExtension.IsKan.{w, v, u}
--   {B : Type u} [inst‚úù : CategoryTheory.Bicategory B] {a b c : B} {f : a ‚ü∂ b} {g : a ‚ü∂ c}
--   (t : CategoryTheory.Bicategory.LeftExtension f g) : Type (max (max v w) w)
-- `IsKan t` is a structure containing the data of 2-morphisms which ensure
-- that `t` is a Kan extension.


#check CategoryTheory.Bicategory.LeftExtension
-- CategoryTheory.Bicategory.LeftExtension.{w, v, u}
--   {B : Type u} [inst‚úù : CategoryTheory.Bicategory B] {a b c : B}
--   (f : a ‚ü∂ b) (g : a ‚ü∂ c) : Type (max v w)




-- PART I: ‚àû-Categories

/- CHAPTER 2 -/


/- CHAPTER 3 -/


/- CHAPTER 4 -/


/- CHAPTER 5 -/


/- CHAPTER 6 -/


-- PART II: ‚àû-GROUPOIDS

/- CHAPTER 7 -/


/- CHAPTER 8 -/


/- CHAPTER 9 -/


/- CHAPTER 10 -/


/- CHAPTER 11 -/


-- PART III: Based Connected ‚àû-Groupoids

/- CHAPTER 12 -/


/- CHAPTER 13 -/


/- CHAPTER 14 -/


/- CHAPTER 15 -/


/- CHAPTER 16 -/